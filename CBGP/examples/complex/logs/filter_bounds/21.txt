Gen		Median		MAD		Best		Div		Run Best		Code
1		27300000.0		366		0.005		366		lst
2		366.0		366		0.006		366		lst
3		366.0		366		0.011		366		lst
4		366.0		366		0.009		366		lst
5		366.0		366		0.013		366		lst
6		366.0		366		0.011		366		lst
7		366.0		366		0.016		366		lst
8		366.0		366		0.017		366		lst
9		366.0		366		0.016		366		lst
10		466.0		366		0.015		366		lst
11		366.0		366		0.018		366		lst
12		540.0		366		0.017		366		lst
13		366.0		366		0.017		366		lst
14		366.0		366		0.018		366		lst
15		366.0		366		0.021		366		lst
16		366.0		366		0.02		366		lst
17		540.0		366		0.023		366		lst
18		4200327.0		366		0.028		366		lst
19		540.0		366		0.03		366		lst
20		4200327.0		366		0.039		366		lst
21		540.0		359		0.047		359		filter(lambda _0: ne(str_(upper), _0), lst)
22		7000258.0		349		0.062		349		filter(lambda _0: ge(False, gt(1, ne(ge(min_(abs_(10), bool2float(True)), -1), _0))), lst)
23		10100267.0		167		0.079		167		filter(lambda _0: ge(upper, _0), lst)
24		11000200.0		167		0.078		167		filter(lambda _0: ge(upper, _0), lst)
25		10900267.0		167		0.084		167		filter(lambda _0: ge(upper, _0), lst)
26		11000198.0		167		0.098		167		filter(lambda _0: ge(upper, _0), lst)
27		11000200.0		167		0.093		167		filter(lambda _0: ge(upper, _0), lst)
28		11600142.0		167		0.092		167		filter(lambda _0: ge(upper, _0), lst)
29		11000200.0		167		0.085		167		filter(lambda _0: ge(upper, _0), lst)
30		11000199.0		167		0.092		167		filter(lambda _0: ge(upper, _0), lst)
31		11000200.0		167		0.1		167		filter(lambda _0: ge(upper, _0), lst)
32		1600026.0		0		0.079		0		filter(lambda _0: ne(lt(upper, _0), le(lower, _0)), lst)
Solution found.
def filter_bounds(lst, lower, upper):
    return filter(lambda _0: ne(lt(upper, _0), le(lower, _0)), lst)
Simplifying genome of length 58.
Simplified to length 47.
Simplified to length 34.
Simplified to length 31.
Simplified to length 30.
Simplified to length 29.
Simplified to length 28.
Simplified to length 27.
Simplified to length 26.
Simplified to length 21.
Simplified to length 20.
Simplified to length 17.
Simplified to length 15.
Simplified to length 14.
Simplified to length 13.
Simplified to length 11.
Simplified genome: length=11 error=0
def filter_bounds(lst, lower, upper):
    return filter(lambda _0: ne(lt(upper, _0), le(lower, _0)), lst)
