Gen		Median		MAD		Best		Div		Run Best		Code
1		388641.0		244941		0.069		244941		dt1.year()
2		245075.0		244941		0.031		244941		dt1.year()
3		245075.0		244941		0.033		244941		dt1.year()
4		245075.0		244941		0.041		244941		dt1.year()
5		245075.0		244941		0.054		244941		dt1.year()
6		245075.0		227531		0.054		227531		sub(365, sub(-89, print_tap(dt2.year())))
7		339473.0		227531		0.087		227531		sub(365, sub(-89, print_tap(dt2.year())))
8		355454.0		215591		0.143		215591		mul(10, 365)
9		361887.0		215591		0.176		215591		mul(10, 365)
10		387657.0		215511		0.238		215511		mul(sub(-89, round_(print_tap(println_tap(2)), 10)), -40)
11		380209.0		211917		0.277		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
12		380737.5		211917		0.313		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
13		386677.0		211917		0.33		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
14		387657.0		211917		0.362		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
15		388441.0		211917		0.357		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
16		388441.0		211917		0.37		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
17		387657.0		211917		0.381		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
18		387657.0		211917		0.373		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
19		388541.0		214248		0.397		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
20		387159.0		214248		0.386		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
21		387657.0		214248		0.384		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
22		387553.0		214248		0.387		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
23		388441.0		211917		0.371		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
24		387657.0		214248		0.391		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
25		387979.0		214248		0.405		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
26		387657.0		214248		0.353		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
27		387755.0		211917		0.341		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
28		387553.0		214793		0.359		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
29		387657.0		214793		0.387		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
30		387657.0		214793		0.374		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
31		387553.0		213803		0.362		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
32		388441.0		213893		0.378		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
33		387159.0		214773		0.399		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
34		387657.0		214793		0.405		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
35		387979.0		211937		0.412		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
36		387274.0		211917		0.374		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
37		387657.0		214241		0.385		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
38		386597.5		214849		0.422		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
39		387274.0		214849		0.408		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
40		385686.5		212157		0.394		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
41		385527.0		214849		0.394		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
42		385846.0		214849		0.395		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
43		384619.0		214849		0.406		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
44		385983.0		212217		0.402		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
45		387657.0		214849		0.402		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
46		384521.0		214849		0.38		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
47		387657.0		211957		0.406		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
48		385527.0		214823		0.382		211917		mul(sub(365, sub(round_(print_tap(println_tap(dt1.minute())), abs_(86)), 2)), 10)
49		387755.0		211893		0.407		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
50		388441.0		213909		0.379		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
51		387559.0		211957		0.41		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
52		387657.0		213909		0.381		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
53		387553.0		213909		0.396		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
54		387912.5		213909		0.389		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
55		387657.0		213909		0.394		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
56		387605.0		213909		0.414		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
57		387500.0		213909		0.362		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
58		387526.5		213909		0.404		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
59		386918.0		213909		0.377		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
60		386677.0		212157		0.379		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
61		382687.5		213909		0.391		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
62		387657.0		213909		0.414		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
63		387269.5		213909		0.403		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
64		387657.0		213909		0.411		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
65		385983.0		213909		0.394		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
66		387500.0		214773		0.378		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
67		385527.0		214773		0.403		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
68		387159.0		214773		0.35		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
69		386330.0		214773		0.372		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
70		381287.0		214773		0.391		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
71		381276.0		214773		0.391		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
72		383149.0		214773		0.422		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
73		380993.0		214773		0.39		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
74		384521.0		214773		0.398		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
75		381581.0		214773		0.37		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
76		383100.0		214773		0.394		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
77		385513.5		214853		0.384		211893		mul(sub(365, sub(dt1.minute(), dt1.day())), 10)
78		388541.0		0		0.265		0		add(abs_(sub(dt1, dt2).days()), 0)
Solution found.
def days_between(dt1, dt1):
    return add(abs_(sub(dt1, dt2).days()), 0)
Simplifying genome of length 50.
Simplified to length 42.
Simplified to length 41.
Simplified to length 39.
Simplified to length 33.
Simplified to length 32.
Simplified to length 31.
Simplified to length 30.
Simplified to length 28.
Simplified to length 27.
Simplified to length 23.
Simplified to length 17.
Simplified to length 15.
Simplified to length 13.
Simplified to length 12.
Simplified to length 11.
Simplified to length 9.
Simplified to length 7.
Simplified to length 5.
Simplified genome: length=5 error=0
def days_between(dt1, dt2):
    return abs_(sub(dt1, dt2).days())
