Gen		Median		MAD		Best		Div		Run Best		Code
1		427274.0		274329		0.073		274329		dt2.year()
2		274378.0		274329		0.041		274329		dt2.year()
3		274378.0		274329		0.039		274329		dt2.year()
4		274378.0		274329		0.047		274329		dt2.year()
5		274378.0		272110		0.045		272110		sub(dt1.year(), -42)
6		401380.0		223700		0.087		223700		mul(pos(dt1.year()), len_(str_(round_(abs_(-1), pos(do_print(1, dt2)))).split_ws()))
7		417944.0		223586		0.115		223586		mul(pos(dt2.year()), len_(str_(dt1.minute()).title().split_ws()))
8		401512.0		223586		0.129		223586		mul(pos(dt2.year()), len_(str_(dt1.minute()).title().split_ws()))
9		413632.0		223582		0.168		223582		mul(pos(sub(print_tap(dt2).year(), len_(wrap(365)))), 2)
10		421881.5		223582		0.188		223582		mul(pos(sub(print_tap(dt2).year(), len_(wrap(365)))), 2)
11		415120.0		223582		0.222		223582		mul(pos(sub(print_tap(dt2).year(), len_(wrap(365)))), 2)
12		410635.5		223582		0.254		223582		mul(pos(sub(print_tap(dt2).year(), len_(wrap(365)))), 2)
13		394415.5		223582		0.261		223582		mul(pos(sub(print_tap(dt2).year(), len_(wrap(365)))), 2)
14		420485.0		223582		0.282		223582		mul(pos(sub(print_tap(dt2).year(), len_(wrap(365)))), 2)
15		408062.0		223582		0.294		223582		mul(pos(sub(print_tap(dt2).year(), len_(wrap(365)))), 2)
16		422576.0		223582		0.322		223582		mul(pos(sub(print_tap(dt2).year(), len_(wrap(365)))), 2)
17		415641.0		223582		0.307		223582		mul(pos(sub(print_tap(dt2).year(), len_(wrap(365)))), 2)
18		424844.0		223582		0.332		223582		mul(pos(sub(print_tap(dt2).year(), len_(wrap(365)))), 2)
19		409810.0		223586		0.334		223582		mul(pos(sub(print_tap(dt2).year(), len_(wrap(365)))), 2)
20		413363.0		206542		0.241		206542		max_(sub(dt1, dt2).days(), len_(str_(mul(int2float(str_(pos(0.4840933147876534)).isalpha()), 365)).upper()))
21		426974.0		0		0.137		0		max_(abs_(sub(dt1, dt2).days()), len_(println_tap(str_(mul(int2float(str_(pos(0.4840933147876534)).isalpha()), 365)).upper())))
Solution found.
def days_between(dt1, dt1):
    return max_(abs_(sub(dt1, dt2).days()), len_(println_tap(str_(mul(int2float(str_(pos(0.4840933147876534)).isalpha()), 365)).upper())))
Simplifying genome of length 62.
Simplified to length 49.
Simplified to length 31.
Simplified to length 30.
Simplified to length 28.
Simplified to length 27.
Simplified to length 26.
Simplified to length 23.
Simplified to length 22.
Simplified to length 20.
Simplified to length 16.
Simplified to length 15.
Simplified to length 14.
Simplified to length 12.
Simplified to length 11.
Simplified to length 7.
Simplified to length 6.
Simplified to length 5.
Simplified genome: length=5 error=0
def days_between(dt1, dt2):
    return abs_(sub(dt1, dt2).days())
