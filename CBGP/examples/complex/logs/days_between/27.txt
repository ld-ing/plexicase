Gen		Median		MAD		Best		Div		Run Best		Code
1		379512.0		239254		0.079		239254		dt2.year()
2		239329.0		223292		0.037		223292		mul(print_tap(10), abs_(365))
3		345082.0		223286		0.059		223286		add(-1, mul(print_tap(10), abs_(365)))
4		345082.0		223286		0.073		223286		add(-1, mul(print_tap(10), abs_(365)))
5		375937.5		223286		0.083		223286		add(-1, mul(print_tap(10), abs_(365)))
6		378462.0		221638		0.115		221638		mul(33, 93)
7		378922.0		221638		0.14		221638		mul(33, 93)
8		378512.0		221638		0.182		221638		mul(33, 93)
9		379015.0		221638		0.222		221638		mul(33, 93)
10		379412.0		221638		0.233		221638		mul(33, 93)
11		379312.0		221638		0.252		221638		mul(33, 93)
12		379312.0		221520		0.268		221520		mul(33, sub(93, print_tap(-1)))
13		378512.0		221520		0.273		221520		mul(33, sub(93, print_tap(-1)))
14		378058.0		221520		0.322		221520		mul(33, sub(93, print_tap(-1)))
15		377333.0		221520		0.309		221520		mul(33, sub(93, print_tap(-1)))
16		376453.5		221520		0.332		221520		mul(33, sub(93, print_tap(-1)))
17		378058.0		221520		0.369		221520		mul(33, sub(93, print_tap(-1)))
18		377562.0		221520		0.357		221520		mul(33, sub(93, print_tap(-1)))
19		378058.0		221520		0.356		221520		mul(33, sub(93, print_tap(-1)))
20		378101.0		221520		0.38		221520		mul(33, sub(93, print_tap(-1)))
21		376627.0		221520		0.354		221520		mul(33, sub(93, print_tap(-1)))
22		373612.0		221520		0.368		221520		mul(33, sub(93, print_tap(-1)))
23		377512.0		221520		0.364		221520		mul(33, sub(93, print_tap(-1)))
24		376386.0		221487		0.378		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
25		375611.5		221504		0.362		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
26		373612.0		221504		0.366		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
27		373612.0		221487		0.397		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
28		375475.0		221487		0.382		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
29		374756.5		221487		0.393		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
30		372409.5		221487		0.422		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
31		372605.5		221487		0.414		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
32		374163.5		221487		0.408		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
33		371911.5		221487		0.408		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
34		373612.0		221487		0.393		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
35		370608.0		221502		0.402		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
36		370979.0		221502		0.41		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
37		370014.5		221487		0.417		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
38		368579.0		221494		0.414		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
39		373657.5		221487		0.398		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
40		371356.5		221494		0.415		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
41		373612.0		221487		0.43		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
42		361968.0		221487		0.435		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
43		370022.5		221502		0.407		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
44		367154.0		221487		0.392		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
45		364824.0		221494		0.422		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
46		370320.0		221502		0.422		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
47		371328.0		221502		0.415		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
48		371645.0		221502		0.422		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
49		370579.5		221494		0.408		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
50		371645.0		221502		0.41		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
51		353754.0		221502		0.4		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
52		369456.0		221502		0.411		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
53		373265.0		221502		0.377		221487		add(dt1.day(), mul(33, sub(round_(93, 5), print_tap(-1))))
54		371645.0		221478		0.382		221478		add(mul(33, do_print(sub(93, -1), dt1)), dt1.month())
55		362736.0		221502		0.402		221478		add(mul(33, do_print(sub(93, -1), dt1)), dt1.month())
56		370070.5		221478		0.421		221478		add(mul(33, do_print(sub(93, -1), dt1)), dt1.month())
57		370003.5		221504		0.389		221478		add(mul(33, do_print(sub(93, -1), dt1)), dt1.month())
58		375621.5		221520		0.394		221478		add(mul(33, do_print(sub(93, -1), dt1)), dt1.month())
59		373828.0		221504		0.404		221478		add(mul(33, do_print(sub(93, -1), dt1)), dt1.month())
60		373024.0		221504		0.39		221478		add(mul(33, do_print(sub(93, -1), dt1)), dt1.month())
61		370214.5		221124		0.384		221124		mul(33, sub(93, neg(pos(min_(5, dt1.hour())))))
62		376249.0		221124		0.387		221124		mul(33, sub(93, neg(pos(min_(5, dt1.hour())))))
63		369936.0		221292		0.426		221124		mul(33, sub(93, neg(pos(min_(5, dt1.hour())))))
64		373113.5		221454		0.419		221124		mul(33, sub(93, neg(pos(min_(5, dt1.hour())))))
65		360347.0		219438		0.407		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
66		371376.0		221454		0.397		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
67		369840.0		221504		0.394		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
68		353340.0		221504		0.413		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
69		370067.0		221504		0.404		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
70		371645.0		221504		0.41		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
71		370320.0		221504		0.375		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
72		373122.0		221504		0.367		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
73		360528.0		221504		0.39		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
74		361008.0		221484		0.398		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
75		369792.0		221504		0.38		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
76		371376.0		221334		0.37		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
77		370128.0		221504		0.355		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
78		369840.0		221504		0.369		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
79		369936.0		221504		0.366		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
80		369744.0		221504		0.394		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
81		370182.5		221504		0.377		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
82		369552.0		221504		0.375		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
83		369840.0		221504		0.373		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
84		370416.0		221504		0.384		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
85		369744.0		221504		0.36		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
86		369744.0		221504		0.379		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
87		369120.0		221504		0.409		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
88		360056.0		221504		0.389		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
89		371645.0		221504		0.392		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
90		362688.0		221460		0.407		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
91		362256.0		221460		0.395		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
92		369504.0		221504		0.414		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
93		368037.0		221504		0.427		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
94		360432.0		220832		0.428		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
95		362179.0		221504		0.4		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
96		369840.0		221504		0.42		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
97		345082.0		221504		0.417		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
98		353616.0		221504		0.408		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
99		360244.0		221504		0.418		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
100		352216.0		221504		0.41		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
101		353478.0		221504		0.428		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
102		371555.0		221504		0.4		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
103		369363.5		221504		0.399		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
104		354766.0		221504		0.386		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
105		369312.0		221504		0.398		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
106		364128.0		221504		0.383		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
107		369744.0		221504		0.378		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
108		351789.0		221504		0.364		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
109		367891.5		221504		0.384		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
110		369696.0		221504		0.368		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
111		367392.0		221504		0.391		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
112		362208.0		221504		0.368		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
113		359366.0		221504		0.37		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
114		367344.0		221410		0.378		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
115		365232.0		221504		0.367		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
116		362567.5		221504		0.376		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
117		360672.0		221504		0.368		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
118		361925.0		221504		0.362		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
119		361488.0		221410		0.387		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
120		368784.0		221410		0.352		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
121		361287.0		221410		0.355		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
122		361964.5		221410		0.341		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
123		371645.0		221410		0.351		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
124		363638.5		221504		0.339		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
125		369744.0		221504		0.332		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
126		370992.0		221504		0.337		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
127		365939.0		221504		0.353		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
128		369408.0		221504		0.356		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
129		371645.0		221504		0.362		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
130		367574.5		221504		0.351		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
131		365449.0		221504		0.378		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
132		369408.0		221504		0.384		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
133		358354.0		221504		0.375		219438		add(mul(if_(float2bool(abs_(dt1.hour())), 33, round_(21, 10)), print_tap(99)), -86)
134		369306.0		100		0.296		100		abs_(pos(sub(dt2, dt1).days()))
135		299438.0		0		0.145		0		abs_(pos(sub(dt1, dt2).days()))
Solution found.
def days_between(dt1, dt1):
    return abs_(pos(sub(dt1, dt2).days()))
Simplifying genome of length 35.
Simplified to length 31.
Simplified to length 25.
Simplified to length 23.
Simplified to length 20.
Simplified to length 18.
Simplified to length 16.
Simplified to length 15.
Simplified to length 14.
Simplified to length 12.
Simplified to length 11.
Simplified to length 10.
Simplified to length 8.
Simplified to length 7.
Simplified to length 6.
Simplified to length 5.
Simplified genome: length=5 error=0
def days_between(dt1, dt2):
    return abs_(sub(dt1, dt2).days())
