Gen		Median		MAD		Best		Div		Run Best		Code
1		100.0		41.0		0.013		41.0		print_tap(input3)
2		53.0		41.0		0.01		41.0		print_tap(input3)
3		53.0		41.0		0.01		41.0		print_tap(input3)
4		53.0		41.0		0.011		41.0		print_tap(input3)
5		53.0		41.0		0.013		41.0		print_tap(input3)
6		53.0		41.0		0.014		41.0		print_tap(input3)
7		53.0		41.0		0.01		41.0		print_tap(input3)
8		53.0		41.0		0.01		41.0		print_tap(input3)
9		53.0		41.0		0.01		41.0		print_tap(input3)
10		53.0		41.0		0.018		41.0		print_tap(input3)
11		53.0		41.0		0.02		41.0		print_tap(input3)
12		53.0		41.0		0.023		41.0		print_tap(input3)
13		53.0		22.0		0.038		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
14		53.0		22.0		0.042		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
15		53.0		22.0		0.049		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
16		53.5		22.0		0.064		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
17		53.0		22.0		0.071		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
18		53.5		22.0		0.071		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
19		53.0		22.0		0.064		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
20		54.0		22.0		0.075		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
21		53.0		22.0		0.076		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
22		53.0		22.0		0.072		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
23		53.0		22.0		0.074		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
24		53.0		22.0		0.069		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
25		53.0		22.0		0.074		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
26		51.0		22.0		0.077		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
27		53.0		22.0		0.086		22.0		print_do(min_(input3, max_(input1, input2)), abs_(10))
28		53.0		19.0		0.095		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
29		53.0		19.0		0.094		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
30		53.0		19.0		0.092		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
31		58.0		19.0		0.101		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
32		53.0		19.0		0.09		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
33		58.0		19.0		0.097		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
34		53.0		19.0		0.085		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
35		55.5		19.0		0.087		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
36		58.0		19.0		0.091		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
37		56.0		19.0		0.086		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
38		53.0		19.0		0.084		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
39		58.0		19.0		0.087		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
40		58.0		19.0		0.097		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
41		55.5		19.0		0.084		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
42		58.0		19.0		0.093		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
43		54.5		19.0		0.094		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
44		53.0		19.0		0.098		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
45		53.0		19.0		0.09		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
46		55.5		19.0		0.089		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
47		54.0		19.0		0.103		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
48		53.0		19.0		0.088		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
49		54.0		19.0		0.088		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
50		53.0		19.0		0.096		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
51		54.0		19.0		0.096		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
52		53.0		19.0		0.104		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
53		53.0		19.0		0.088		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
54		56.5		19.0		0.094		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
55		53.0		19.0		0.1		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
56		53.0		19.0		0.109		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
57		53.0		19.0		0.108		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
58		53.0		19.0		0.093		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
59		53.0		19.0		0.112		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
60		58.0		19.0		0.108		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
61		53.5		19.0		0.118		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
62		58.0		19.0		0.087		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
63		53.0		19.0		0.1		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
64		53.0		19.0		0.103		19.0		print_do(max_(min_(input1, pos(input2)), input3), input2)
65		58.0		0.0		0.102		0.0		sub(print_do(max_(min_(input1, max_(input3, input2)), min_(input2, float2int(input3))), sub(not_(ne(False, input3)), 10)), input3)
Solution found.
def median(input1, input2, input3):
    return sub(print_do(max_(min_(input1, max_(input3, input2)), min_(input2, float2int(input3))), sub(not_(ne(False, input3)), 10)), input3)

Simplifying genome of length 61.
Simplified to length 55.
Simplified to length 54.
Simplified to length 42.
Simplified to length 39.
Simplified to length 38.
Simplified to length 29.
Simplified to length 27.
Simplified to length 26.
Simplified to length 24.
Simplified to length 23.
Simplified to length 22.
Simplified to length 21.
Simplified to length 18.
Simplified to length 17.
Simplified to length 15.
Simplified to length 14.
Simplified to length 13.
Simplified to length 11.
Simplified genome: length=11 error=0.0
def median(input1, input2, input3):
    return print_do(max_(min_(input1, max_(input3, input2)), min_(input2, input3)), False)

[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Final Test Error: 0.0
