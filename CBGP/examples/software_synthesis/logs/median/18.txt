Gen		Median		MAD		Best		Div		Run Best		Code
1		100.0		49.0		0.016		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
2		53.0		49.0		0.017		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
3		53.0		49.0		0.017		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
4		53.0		49.0		0.016		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
5		53.0		49.0		0.018		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
6		53.0		49.0		0.017		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
7		53.0		49.0		0.017		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
8		53.0		49.0		0.018		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
9		53.0		49.0		0.02		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
10		53.0		49.0		0.021		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
11		53.0		49.0		0.024		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
12		53.0		49.0		0.025		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
13		53.0		49.0		0.03		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
14		53.0		49.0		0.034		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
15		53.0		49.0		0.034		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
16		53.0		49.0		0.054		49.0		print_do(input2, int2bool(int2bool(abs_(True))))
17		53.5		27.0		0.044		27.0		do_print(0.33775901221685956, max_(input2, min_(input1, input3)))
18		61.0		24.0		0.057		24.0		do_print(0.33775901221685956, max_(input3, min_(input1, input2)))
19		69.0		22.0		0.074		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
20		53.0		22.0		0.099		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
21		56.0		22.0		0.093		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
22		56.0		22.0		0.113		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
23		68.5		22.0		0.117		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
24		60.5		22.0		0.108		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
25		67.0		22.0		0.104		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
26		70.5		22.0		0.116		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
27		68.5		22.0		0.108		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
28		66.0		22.0		0.111		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
29		54.0		22.0		0.107		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
30		67.5		22.0		0.115		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
31		56.0		22.0		0.143		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
32		56.5		22.0		0.127		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
33		71.0		22.0		0.121		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
34		69.0		22.0		0.128		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
35		68.0		22.0		0.128		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
36		65.0		22.0		0.126		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
37		68.0		22.0		0.15		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
38		72.0		22.0		0.112		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
39		53.0		22.0		0.116		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
40		56.0		22.0		0.123		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
41		66.0		22.0		0.124		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
42		68.0		22.0		0.14		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
43		70.0		22.0		0.129		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
44		70.0		22.0		0.163		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
45		69.0		22.0		0.142		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
46		71.0		22.0		0.131		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
47		69.0		22.0		0.152		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
48		70.0		22.0		0.15		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
49		71.5		22.0		0.139		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
50		69.0		22.0		0.141		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
51		72.5		22.0		0.14		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
52		71.0		22.0		0.146		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
53		68.0		22.0		0.136		22.0		do_print(0.33775901221685956, min_(max_(input3, input1), input2))
54		69.0		19.0		0.136		19.0		do_print(0.33775901221685956, min_(max_(min_(input3, input1), input2), max_(abs_(input1), abs_(input3))))
55		74.0		0.0		0.14		0.0		do_print(0.33775901221685956, min_(max_(min_(input3, input1), input2), max_(input1, input3)))
Solution found.
def median(input1, input2, input3):
    return do_print(0.33775901221685956, min_(max_(min_(input3, input1), input2), max_(input1, input3)))

Simplifying genome of length 74.
Simplified to length 65.
Simplified to length 62.
Simplified to length 60.
Simplified to length 49.
Simplified to length 44.
Simplified to length 35.
Simplified to length 34.
Simplified to length 33.
Simplified to length 29.
Simplified to length 26.
Simplified to length 24.
Simplified to length 19.
Simplified to length 16.
Simplified to length 15.
Simplified to length 13.
Simplified to length 12.
Simplified to length 11.
Simplified genome: length=11 error=0.0
def median(input1, input2, input3):
    return do_print(0.33775901221685956, min_(max_(min_(input3, input1), input2), max_(input1, input3)))

[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Final Test Error: 0.0
