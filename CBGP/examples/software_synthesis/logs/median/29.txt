Gen		Median		MAD		Best		Div		Run Best		Code
1		100.0		46.0		0.005		46.0		print_do(input1, -1)
2		49.0		41.0		0.009		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
3		49.0		41.0		0.01		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
4		53.0		41.0		0.01		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
5		53.0		41.0		0.018		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
6		51.0		41.0		0.019		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
7		51.0		41.0		0.016		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
8		51.0		41.0		0.023		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
9		52.0		41.0		0.022		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
10		51.0		41.0		0.019		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
11		53.0		41.0		0.019		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
12		51.0		41.0		0.024		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
13		51.0		41.0		0.022		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
14		49.0		41.0		0.029		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
15		51.0		41.0		0.041		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
16		51.0		41.0		0.042		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
17		51.0		41.0		0.044		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
18		51.0		41.0		0.042		41.0		bool2int(gt(print_tap(max_(input1, input3)), ge(-1, 2)))
19		51.0		22.0		0.048		22.0		do_print(input3, max_(min_(input1, input2), input3))
20		49.0		19.0		0.053		19.0		do_print(input3, max_(min_(input2, input3), input1))
21		53.0		19.0		0.054		19.0		do_print(input3, max_(min_(input2, input3), input1))
22		51.0		19.0		0.056		19.0		do_print(input3, max_(min_(input2, input3), input1))
23		62.0		19.0		0.073		19.0		do_print(input3, max_(min_(input2, input3), input1))
24		48.5		19.0		0.07		19.0		do_print(input3, max_(min_(input2, input3), input1))
25		51.0		19.0		0.074		19.0		do_print(input3, max_(min_(input2, input3), input1))
26		51.5		19.0		0.076		19.0		do_print(input3, max_(min_(input2, input3), input1))
27		53.0		19.0		0.092		19.0		do_print(input3, max_(min_(input2, input3), input1))
28		53.0		17.0		0.101		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
29		74.0		17.0		0.106		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
30		66.0		17.0		0.101		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
31		64.5		17.0		0.102		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
32		69.0		17.0		0.125		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
33		75.5		17.0		0.119		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
34		53.0		17.0		0.112		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
35		71.5		17.0		0.121		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
36		64.0		17.0		0.114		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
37		76.0		17.0		0.109		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
38		59.0		17.0		0.107		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
39		70.0		17.0		0.116		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
40		69.0		17.0		0.118		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
41		69.0		17.0		0.113		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
42		72.0		17.0		0.113		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
43		69.0		17.0		0.1		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
44		75.0		17.0		0.117		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
45		74.0		17.0		0.105		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
46		72.5		17.0		0.11		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
47		58.0		17.0		0.111		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
48		75.0		17.0		0.111		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
49		75.0		17.0		0.105		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
50		68.5		17.0		0.099		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
51		53.0		17.0		0.1		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
52		67.5		17.0		0.119		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
53		65.0		17.0		0.113		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
54		69.0		17.0		0.129		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
55		69.0		17.0		0.117		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
56		69.5		17.0		0.127		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
57		69.0		17.0		0.118		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
58		63.0		17.0		0.125		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
59		64.5		17.0		0.106		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
60		53.0		17.0		0.121		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
61		69.0		17.0		0.134		17.0		do_print(input3, max_(min_(input1, abs_(input2)), min_(input3, input2)))
62		53.0		0.0		0.118		0.0		do_print(input3, max_(min_(input1, input2), min_(input3, max_(input2, input1))))
Solution found.
def median(input1, input2, input3):
    return do_print(input3, max_(min_(input1, input2), min_(input3, max_(input2, input1))))

Simplifying genome of length 30.
Simplified to length 29.
Simplified to length 27.
Simplified to length 23.
Simplified to length 20.
Simplified to length 19.
Simplified to length 18.
Simplified to length 16.
Simplified to length 15.
Simplified to length 14.
Simplified to length 13.
Simplified to length 12.
Simplified to length 11.
Simplified genome: length=11 error=0.0
def median(input1, input2, input3):
    return do_print(input3, max_(min_(input1, input2), min_(input3, max_(input2, input1))))

[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Final Test Error: 0.0
