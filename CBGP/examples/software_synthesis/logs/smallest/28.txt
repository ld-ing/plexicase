Gen		Median		MAD		Best		Div		Run Best		Code
1		105.0		65.0		0.015		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
2		68.0		65.0		0.015		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
3		68.0		65.0		0.016		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
4		68.0		65.0		0.017		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
5		68.0		65.0		0.018		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
6		68.0		65.0		0.014		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
7		68.0		65.0		0.015		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
8		68.0		65.0		0.015		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
9		68.0		65.0		0.014		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
10		68.0		65.0		0.017		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
11		68.0		65.0		0.015		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
12		68.0		65.0		0.018		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
13		68.0		65.0		0.021		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
14		68.0		65.0		0.017		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
15		68.0		65.0		0.022		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
16		68.0		65.0		0.016		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
17		68.0		65.0		0.015		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
18		68.0		65.0		0.02		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
19		68.0		65.0		0.015		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
20		68.0		65.0		0.021		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
21		68.0		65.0		0.025		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
22		68.0		65.0		0.021		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
23		68.0		65.0		0.021		65.0		mod(False, str_(min_(print_do(input1, False), True)).isdigit())
24		68.0		54.0		0.029		54.0		print_tap(min_(input3, input4))
25		67.0		39.0		0.043		39.0		print_tap(min_(input3, input2))
26		65.0		26.0		0.094		26.0		int2float(print_tap(min_(min_(input3, input2), input4)))
27		62.0		13.0		0.096		13.0		int2float(print_tap(min_(min_(input3, input1), input2)))
28		58.0		0.0		0.114		0.0		int2float(print_tap(min_(min_(min_(input3, input1), input2), input4)))
Solution found.
def smallest(input1, input2, input3, input4):
    return int2float(print_tap(min_(min_(min_(input3, input1), input2), input4)))

Simplifying genome of length 33.
Simplified genome: length=33 error=0.0
def smallest(input1, input2, input3, input4):
    return int2float(print_tap(min_(min_(min_(input3, input1), input2), input4)))

[0. 0. 0. ... 0. 0. 0.]
Final Test Error: 0.0
