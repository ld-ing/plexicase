Gen		Median		MAD		Best		Div		Run Best		Code
1		105.0		62.0		0.021		62.0		min_(print_tap(str_(input1)).isidentifier(), not_(True))
2		78.0		62.0		0.03		62.0		min_(print_tap(str_(input1)).isidentifier(), not_(True))
3		71.0		39.0		0.026		39.0		add(mod(input3, 2), print_do(min_(input2, input1), int2float(-1)))
4		71.0		39.0		0.04		39.0		add(mod(input3, 2), print_do(min_(input2, input1), int2float(-1)))
5		47.0		16.0		0.055		16.0		add(2, print_do(min_(input2, min_(input3, input1)), input4))
6		79.0		16.0		0.072		16.0		add(2, print_do(min_(input2, min_(input3, input1)), input4))
7		78.0		16.0		0.063		16.0		add(2, print_do(min_(input2, min_(input3, input1)), input4))
8		71.5		16.0		0.068		16.0		add(2, print_do(min_(input2, min_(input3, input1)), input4))
9		78.0		16.0		0.057		16.0		add(2, print_do(min_(input2, min_(input3, input1)), input4))
10		77.0		16.0		0.083		16.0		add(2, print_do(min_(input2, min_(input3, input1)), input4))
11		74.0		0.0		0.074		0.0		print_tap(min_(input2, min_(input3, min_(input1, input4))))
Solution found.
def smallest(input1, input2, input3, input4):
    return print_tap(min_(input2, min_(input3, min_(input1, input4))))

Simplifying genome of length 44.
Simplified genome: length=44 error=0.0
def smallest(input1, input2, input3, input4):
    return print_tap(min_(input2, min_(input3, min_(input1, input4))))

[0. 0. 0. ... 0. 0. 0.]
Final Test Error: 0.0
