Gen		Median		MAD		Best		Div		Run Best		Code
1		105.0		63.0		0.014		63.0		pos(print_tap(float2int(input4)))
2		67.0		63.0		0.015		63.0		pos(print_tap(float2int(input4)))
3		67.0		63.0		0.022		63.0		pos(print_tap(float2int(input4)))
4		68.0		63.0		0.022		63.0		pos(print_tap(float2int(input4)))
5		68.0		63.0		0.023		63.0		pos(print_tap(float2int(input4)))
6		68.0		62.0		0.027		62.0		pos(print_tap(float2int(min_(input4, min_(False, input2)))))
7		68.0		38.0		0.034		38.0		pos(print_tap(float2int(min_(input4, input2))))
8		77.0		18.0		0.058		18.0		pos(print_tap(float2int(min_(input4, min_(input1, input2)))))
9		75.0		18.0		0.095		18.0		pos(print_tap(float2int(min_(input4, min_(input1, input2)))))
10		77.0		18.0		0.1		18.0		pos(print_tap(float2int(min_(input4, min_(input1, input2)))))
11		78.0		18.0		0.093		18.0		pos(print_tap(float2int(min_(input4, min_(input1, input2)))))
12		67.0		18.0		0.117		18.0		pos(print_tap(float2int(min_(input4, min_(input1, input2)))))
13		66.0		0.0		0.091		0.0		print_tap(float2int(min_(input4, min_(input3, min_(input2, input1)))))
Solution found.
def smallest(input1, input2, input3, input4):
    return print_tap(float2int(min_(input4, min_(input3, min_(input2, input1)))))

Simplifying genome of length 37.
Simplified genome: length=37 error=0.0
def smallest(input1, input2, input3, input4):
    return print_tap(float2int(min_(input4, min_(input3, min_(input2, input1)))))

[0. 0. 0. ... 0. 0. 0.]
Final Test Error: 0.0
